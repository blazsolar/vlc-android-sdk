buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.7.0'
    }
}

import org.ajoberstar.grgit.Grgit

class Architecture {

    String taskName
    String architecture
    String mode

    Architecture(taskName, architecture, mode) {
        this.taskName = taskName
        this.architecture = architecture
        this.mode = mode
    }

}

def architectures = [
        new Architecture('Arm', 'armeabi-v7a', '--release'),
        new Architecture('Arm64', 'arm64-v8a', '--release'),
        new Architecture('Mips', 'mips', '--release'),
        new Architecture('Mips64', 'mips64', '--release'),
        new Architecture('X86', 'x86', '--release'),
        new Architecture('X86_64', 'x86_64', '--release')
]

tasks.withType(Javadoc).all { enabled = false }

task vlcAndroidClone {
    group = 'Vlc'
    description = 'Clone VLC Android source code'
    doLast {
      def repo = Grgit.clone(uri: VLC_ANDROID_SCM, dir: project.ext.vlcAndroidSource)
      repo.checkout branch: "tags/${VLC_ANDROID_VERSION}"
    }
    onlyIf { !project.ext.vlcAndroidSource.exists() }
}

task vlcClone(dependsOn: 'vlcAndroidClone') {
    group = 'Vlc'
    description = 'Clone VLC Android source code'
    doLast {
        def repo = Grgit.clone(uri: VLC_SCM, dir: project.ext.vlcSource)
        repo.checkout branch: VLC_TESTED_HASH
    }
    onlyIf { !project.ext.vlcSource.exists() }
}

//task vlcCheckout(dependsOn: 'vlcClone') {
//    group = 'Vlc'
//    description = 'Update VLC Android source code if exists'
//    doLast {
//        try {
//            def repo = Grgit.open(project.ext.vlcSource)
//            repo.pull(rebase: true)
//        }
//        catch (RuntimeException e) {
//            logger.warn("Wasn't able to update checkout at ${project.ext.vlcSource} : ${e.getClass()}  - ${e.getLocalizedMessage()}");
//        }
//    }
//    onlyIf { project.ext.vlcSource.exists() }
//}

task vlcPurge(type: Delete, dependsOn: ['vlcPurgeJava', 'vlcPurgeJni']) {
    group = 'Vlc'
    description = 'Delete VLC Java and jnilibs directories'
}

task vlcPurgeJava(type: Delete) {
    group = 'Vlc'
    description = 'Delete VLC Java directories'
    delete 'src/main/java'
}

task vlcPurgeJni(type: Delete) {
    group = 'Vlc'
    description = 'Delete VLC jni directories'
    delete 'src/main/jniLibs'
}

architectures.each {
    def a = it
    def compileArchitectureTaskName = "vlcCompile${a.taskName}"
    task "${compileArchitectureTaskName}"(type: Exec) {
        group = 'Vlc'
        description = "Compile ${a.taskName} VLC architecture"
        workingDir project.ext.vlcAndroidSource
        commandLine './compile-libvlc.sh'
        args '-a', a.architecture
        args a.mode
        onlyIf { project.ext.vlcAndroidSource.exists() }
    }

    task "vlcBuild${a.taskName}"(type: Copy, dependsOn: compileArchitectureTaskName) {
        from "${project.ext.vlcAndroidSource.getAbsolutePath()}/libvlc/jni/libs/${a.architecture}/"
        into "src/main/jniLibs/${a.architecture}/"
        finalizedBy 'vlcCopyJavaFiles'
        onlyIf { project.ext.vlcAndroidSource.exists() }
    }
}

task vlcCopyJavaFiles(type: Copy) {
    group = 'Vlc'
    description = 'Copy source from VLC Android source code to project if exists'
    from "${project.ext.vlcAndroidSource.getAbsolutePath()}/libvlc/src/"
    into "src/main/java"
    onlyIf { project.ext.vlcAndroidSource.exists() }
}

task vlcBuild() {
    group = 'Vlc'
    description = 'Build Vlc source code and copies resulting libVlc libraries into project'
    dependsOn { tasks.findAll { task -> task.name.startsWith('vlcBuild') && task.name != 'vlcBuild' } }
}
